package my;

import my.model.Person;
import org.junit.jupiter.api.Test;

import static my.matchers.PersonMatcher.hasName;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

public class PersonMatcherTest {

    @Test
    public void testPersonMatcher() {
        // Example usage of PersonMatcher
        Person person = new Person("John");

        // Assuming you have a matcher for Person, e.g., isPersonNamed("John")
        // assertThat(person, isPersonNamed("John"));

        // If you have a custom matcher, it would look something like this:
        // assertThat(person, PersonMatcher.isPersonNamed("John"));

        // For demonstration purposes, this test currently does nothing.
        // You would replace the above comments with actual assertions.
        assertThat(person, hasName(is("John")));
        // This will check if the person's name is "John" using the hasName matcher.
        // If the name is not "John", it will throw an AssertionError.
        // The hasName matcher is a FeatureMatcher that extracts the name from the Person object
        // and checks it against the provided matcher (in this case, is("John")).
        // The FeatureMatcher will log the calls to featureValueOf, showing how it extracts the
        // feature (name) from the Person object.
    }

    @Test
    public void testPersonMatcherWithNameNegativeTest() {
        Person person = new Person("John");
        // This test is expected to fail because the person's name is "John", not "Jane".
        // The hasName matcher will check if the name matches "Jane", which it does not
        // and will throw an AssertionError.
        assertThat(person, hasName(is("Jane")));
        // This will fail because the person's name is "John", not "Jane".
        // The hasName matcher will extract the name from the Person object and compare it to "Jane".
        // Since the names do not match, it will throw an AssertionError.
        // The test is designed to demonstrate the failure case of the hasName matcher.
        // If you run this test, it will fail, showing that the person's name was "John" instead of "Jane".
        // The failure message will indicate that the expected name was "Jane" but the actual name was "John".
        // This is useful for verifying that the matcher correctly identifies when the name does not match.
        // If you want to see the failure message, you can run this test in your IDE
        // or using a test runner. It will show the mismatch description generated by the hasName
        // matcher, which will indicate that the expected name was "Jane" but the actual name was "John".
    }

}
